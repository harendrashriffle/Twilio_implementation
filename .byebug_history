c
@client
api_key_secret
api_key_sid
auth_token
account_sid
n
c
@client
api_key_secret
api_key_sid
auth_token
account_sid
ENV['API_KEY_SECRET']
ENV['API_KEY_SID']
ENV['TWILIO_AUTH_TOKEN']
ENV['TWILIO_ACCOUNT_SID']
n
c
n
c
resource
n
resource
c
resources
n
resources
c
resource.index
n
c
a_method
resource
resource.a_method
custom\
sidebar
c
7AAAAADDDEEECCCBBB2666CCCCAAAAABBBCCCDDDDEEEErestaurant,restaurant,000~.....~~~
qwertyuiopasdfghjklzxcvbnmaAQWSEDRFTGYHUJIIKLOPZXCVBNM`~1!2@3#4$5%6^7&8*9(0)-_=+[{]}\|;:'",<.>/?[1;2PQRS;2~;2~;2~;2~;2~;2~2~;2~;2~restaurant,//**-+
restaurant
new_record?
continue
c
cv
c
params[:restaurant_id]
restaurant_id
params
@restaurant
restaurant
params[:id]
c
restaurant
c
dish.restaurant.name
dish.restaurant
dish
@dishes
c
@cart_item
n
@cart_items
n
@cart_items
current_user.cart.cart_items
exit
n
c
n
c
n
c
n
n\
n
users_path
data
resource_name
users_path
exit
n
resource.errors.full_messages.each
<%= message %>
message
resource.errors.full_messages.each
n
resource.class.model_name.human.downcase
resource.errors.count
I18n.t
n
resource.class.model_name.human.downcase
resource.errors.count
errors.messages.not_saved
I18n.t
exit
       %>
                 resource: resource.class.model_name.human.downcase)
                 count: resource.errors.count,
<%= I18n.t("errors.messages.not_saved",
                 resource: resource.class.model_name.human.downcase)
                 count: resource.errors.count,
I18n.t("errors.messages.not_saved",
resource.errors.full_messages.each
c
params.require(:dish).permit(:name,:price,:category_id)
:name
name
n
name
c
@restaurant@restaurant@restaurant
@restaurant@restaurant
@restaurant
c
n
restaurant_dishes_path(@restaurant, @dish, @category)
@category
@dish
@restaurant
n
@restaurant
@restaurant.name
n
c
exit
c
message
@restaurant.errors.full_messages
@restaurant.errors.full_messages'
 @restaurant.errors
continue
c
n
continue
c
continue
message
continue
message
continue
message
continue
@restaurant.errors.full_messages
continue
@restaurant.errors.full_messages
continue
n
@restaurant.errors.full_messages
continue
@restaurant.errors.full_messages
n
continue
n
continue
n
c
n
c
n
@restaurant.save!
n
c
@restaurant.save!
n
c
@restaurant.save!
set_params
n
set_params.valid?
set_params
exit
JWT.decode(token, SECRET_KEY)
JWT
SECRET_KEY
token
payload
exit
n
exit
n
restaurants
c
@restaurant.present?
@restaurant.nil?
@restaurant
c
params
@restaurant = Restaurant.where(user_id: @current_user.id).find_by_id(params[:id])
params
parasms
params[:restaurant_id]
Restaurant.where(user_id: @current_user.id)
@restaurant
exit
restaurant
n
restaurant
exit
select_restaurant
restaurant
n
select_restaurant
;
@current_user.restaurant
exit
restaurant.dishes.find(2)
restaurant.dishes.find_by(2)
restaurant.dishes.find_by(params[:id])
dish
restaurant.present?
restaurant
n
@current_user.type
@current_user
exit
exigt
exit
@current_user.restaurants
@current_user
@current_user.restaurants
restaurants
n
restaurants
n
mn
@current_user.type
exit
@current_user.type
exit
last_order.destroy
exit
last_order.destroy
exit
c
n
@user
n
c
UserMailerUserMailer.welcome_email(user).deliver_now
UserMailer
user
exit
n
@user.email
@user
n
user
c
@user.email
@user
n
user
@user
exit
add_items
